package main

/*
Functionality we need:

- One Click to Generate Encryption Key used for restic, and encrypt that key with 5 keys, which will require 3 keys to decrypt
- One Click to Output Encrpytion Key used in restic for decrypting data


*/
import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/hex"
	"encoding/pem"
	"fmt"
	"io/ioutil"
	"math/rand"
	"os"
	"path"
	"path/filepath"
	"strings"

	"github.com/bodaay/multikey/multikey"
	"github.com/bodaay/multikey/multikey/keys"
)

const numberOfRandomEncKeysGenerated = 5
const minNumberOfKeysToDecrypt = 3
const randomPlainTextResticPasswordLength = 16
const pubKeyExtension = "kPubKey"
const priKeyExtension = "kPriKey"
const resticKeyExtension = "kMulKey"

func printUsage(execName string) {
	fmt.Printf("Usage To Generate Encryption Key Files: %s Generate DestinationFolder\n", execName)
	fmt.Printf("Usage To Generate Encrypted Random Restic Password: %s Encrypt DestinationFolder PublicKey1FilePath PublicKey2FilePath PublicKey3FilePath PublicKey4FilePath PublicKey5FilePath\n", execName)
	fmt.Printf("Usage To Get Back Decrypted Restic Password: %s Decrypt ResticEncryptedKeyFile PirvateKey1FilePath PirvateKey2FilePath PirvateKey3FilePath\n", execName)

}

func FolderExists(folderName string) bool {
	if _, err := os.Stat(folderName); !os.IsNotExist(err) {
		return true
	}
	return false
}
func publicKeyToBytes(pub *rsa.PublicKey) ([]byte, error) {
	pubASN1, err := x509.MarshalPKIXPublicKey(pub)
	if err != nil {
		return nil, err
	}

	pubBytes := pem.EncodeToMemory(&pem.Block{
		Type:  "RSA PUBLIC KEY",
		Bytes: pubASN1,
	})

	return pubBytes, nil
}
func privateKeyToBytes(priv *rsa.PrivateKey) []byte {
	privBytes := pem.EncodeToMemory(
		&pem.Block{
			Type:  "RSA PRIVATE KEY",
			Bytes: x509.MarshalPKCS1PrivateKey(priv),
		},
	)

	return privBytes
}
func publicKeyToHexEncodedString(pub *rsa.PublicKey) (string, error) {
	pbytes, err := publicKeyToBytes(pub)
	if err != nil {
		return "", err
	}
	return hex.EncodeToString(pbytes), nil
}
func privateKeyToHexEncodedString(priv *rsa.PrivateKey) string {
	pbytes := privateKeyToBytes(priv)
	return hex.EncodeToString(pbytes)
}
func main() {
	execName := filepath.Base(os.Args[0])

	if len(os.Args) < 3 {
		printUsage(execName)
		os.Exit(0)
	}
	command := strings.ToLower(os.Args[1])
	destinationPath := os.Args[2]
	if command == "generate" {
		// destinationPath := os.Args[2]
		//verify destination path is correct
		if !FolderExists(destinationPath) {
			err := os.MkdirAll(destinationPath, os.ModePerm)
			if err != nil {
				panic(err)
			}

		}
		os.MkdirAll(path.Join(destinationPath, "key1"), os.ModePerm)
		os.MkdirAll(path.Join(destinationPath, "key2"), os.ModePerm)
		os.MkdirAll(path.Join(destinationPath, "key3"), os.ModePerm)
		os.MkdirAll(path.Join(destinationPath, "key4"), os.ModePerm)
		os.MkdirAll(path.Join(destinationPath, "key5"), os.ModePerm)
		PubKey1FileName := path.Join(destinationPath, "key1", fmt.Sprintf("Pubkey1.%s", pubKeyExtension))
		PubKey2FileName := path.Join(destinationPath, "key2", fmt.Sprintf("Pubkey2.%s", pubKeyExtension))
		PubKey3FileName := path.Join(destinationPath, "key3", fmt.Sprintf("Pubkey3.%s", pubKeyExtension))
		PubKey4FileName := path.Join(destinationPath, "key4", fmt.Sprintf("Pubkey4.%s", pubKeyExtension))
		PubKey5FileName := path.Join(destinationPath, "key5", fmt.Sprintf("Pubkey5.%s", pubKeyExtension))

		PriKey1FileName := path.Join(destinationPath, "key1", fmt.Sprintf("Prikey1.%s", priKeyExtension))
		PriKey2FileName := path.Join(destinationPath, "key2", fmt.Sprintf("Prikey2.%s", priKeyExtension))
		PriKey3FileName := path.Join(destinationPath, "key3", fmt.Sprintf("Prikey3.%s", priKeyExtension))
		PriKey4FileName := path.Join(destinationPath, "key4", fmt.Sprintf("Prikey4.%s", priKeyExtension))
		PriKey5FileName := path.Join(destinationPath, "key5", fmt.Sprintf("Prikey5.%s", priKeyExtension))

		//generate the 5 keys

		//Key 1
		priKey1, pubKey1, err := keys.GenerateRSAKeyPair(2048)
		if err != nil {
			panic(err)
		}
		pubKey1Hex, err := publicKeyToHexEncodedString(pubKey1)
		if err != nil {
			panic(err)
		}
		priKey1Hex := privateKeyToHexEncodedString(priKey1)
		err = ioutil.WriteFile(PubKey1FileName, []byte(pubKey1Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(PriKey1FileName, []byte(priKey1Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}

		//Key 2
		priKey2, pubKey2, err := keys.GenerateRSAKeyPair(2048)
		if err != nil {
			panic(err)
		}
		pubKey2Hex, err := publicKeyToHexEncodedString(pubKey2)
		if err != nil {
			panic(err)
		}
		priKey2Hex := privateKeyToHexEncodedString(priKey2)
		err = ioutil.WriteFile(PubKey2FileName, []byte(pubKey2Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(PriKey2FileName, []byte(priKey2Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}

		//Key 3
		priKey3, pubKey3, err := keys.GenerateRSAKeyPair(2048)
		if err != nil {
			panic(err)
		}
		pubKey3Hex, err := publicKeyToHexEncodedString(pubKey3)
		if err != nil {
			panic(err)
		}
		priKey3Hex := privateKeyToHexEncodedString(priKey3)
		err = ioutil.WriteFile(PubKey3FileName, []byte(pubKey3Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(PriKey3FileName, []byte(priKey3Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}

		//Key 4
		priKey4, pubKey4, err := keys.GenerateRSAKeyPair(2048)
		if err != nil {
			panic(err)
		}
		pubKey4Hex, err := publicKeyToHexEncodedString(pubKey4)
		if err != nil {
			panic(err)
		}
		priKey4Hex := privateKeyToHexEncodedString(priKey4)
		err = ioutil.WriteFile(PubKey4FileName, []byte(pubKey4Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(PriKey4FileName, []byte(priKey4Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		//Key 5
		priKey5, pubKey5, err := keys.GenerateRSAKeyPair(2048)
		if err != nil {
			panic(err)
		}
		pubKey5Hex, err := publicKeyToHexEncodedString(pubKey5)
		if err != nil {
			panic(err)
		}
		priKey5Hex := privateKeyToHexEncodedString(priKey5)
		err = ioutil.WriteFile(PubKey5FileName, []byte(pubKey5Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(PriKey5FileName, []byte(priKey5Hex), os.ModePerm)
		if err != nil {
			panic(err)
		}

		// var pubs []*rsa.PublicKey
		// pubs = append(pubs, pubKey1)
		// pubs = append(pubs, pubKey2)
		// pubs = append(pubs, pubKey3)
		// pubs = append(pubs, pubKey4)
		// pubs = append(pubs, pubKey5)
		// mkEncryptedSecret, err := multikey.Encrypt([]byte(radomResticPassword), pubs, minNumberOfKeysToDecrypt)
		// if err != nil {
		// 	panic(err)
		// }
		// err = ioutil.WriteFile(ResticEncryptedKeyFile, []byte(mkEncryptedSecret), os.ModePerm)
		// if err != nil {
		// 	panic(err)
		// }
		// fmt.Println(radomResticPassword)

	} else if command == "encrypt" {
		ResticEncryptedKeyFile := path.Join(destinationPath, fmt.Sprintf("restic.key.%s", resticKeyExtension))
		//Read Public Keys from files
		pubKey1FileName := os.Args[3]
		pubKey2FileName := os.Args[4]
		pubKey3FileName := os.Args[5]
		pubKey4FileName := os.Args[6]
		pubKey5FileName := os.Args[7]

		//Key 1
		pubKey1Bytes, err := ioutil.ReadFile(pubKey1FileName)
		if err != nil {
			panic(err)
		}
		pubKey1PubRSA, err := keys.DecodePubKeyPEM(pubKey1Bytes)
		if err != nil {
			panic(err)
		}

		//Key 2
		pubKey2Bytes, err := ioutil.ReadFile(pubKey2FileName)
		if err != nil {
			panic(err)
		}
		pubKey2PubRSA, err := keys.DecodePubKeyPEM(pubKey2Bytes)
		if err != nil {
			panic(err)
		}

		//Key 3
		pubKey3Bytes, err := ioutil.ReadFile(pubKey3FileName)
		if err != nil {
			panic(err)
		}
		pubKey3PubRSA, err := keys.DecodePubKeyPEM(pubKey3Bytes)
		if err != nil {
			panic(err)
		}

		//Key 4
		pubKey4Bytes, err := ioutil.ReadFile(pubKey4FileName)
		if err != nil {
			panic(err)
		}
		pubKey4PubRSA, err := keys.DecodePubKeyPEM(pubKey4Bytes)
		if err != nil {
			panic(err)
		}

		//Key 5
		pubKey5Bytes, err := ioutil.ReadFile(pubKey5FileName)
		if err != nil {
			panic(err)
		}
		pubKey5PubRSA, err := keys.DecodePubKeyPEM(pubKey5Bytes)
		if err != nil {
			panic(err)
		}

		chars := []rune("ABCDEFGHIJKLMNOPQRSTUVWXYZ" + "abcdefghijklmnopqrstuvwxyzåäö" + "0123456789" + "!@#$%^&*")
		length := randomPlainTextResticPasswordLength
		var b strings.Builder
		for i := 0; i < length; i++ {
			b.WriteRune(chars[rand.Intn(len(chars))])
		}
		radomResticPassword := b.String() // E.g. "ExcbsVQs"

		var pubs []*rsa.PublicKey
		pubs = append(pubs, pubKey1PubRSA)
		pubs = append(pubs, pubKey2PubRSA)
		pubs = append(pubs, pubKey3PubRSA)
		pubs = append(pubs, pubKey4PubRSA)
		pubs = append(pubs, pubKey5PubRSA)

		mkEncryptedSecret, err := multikey.Encrypt([]byte(radomResticPassword), pubs, minNumberOfKeysToDecrypt)
		if err != nil {
			panic(err)
		}
		err = ioutil.WriteFile(ResticEncryptedKeyFile, []byte(mkEncryptedSecret), os.ModePerm)
		if err != nil {
			panic(err)
		}
		fmt.Println(radomResticPassword)

	} else if command == "decrypt" {
		// resticKeyFile := os.Args[2]
		// Key1FileName := os.Args[3]
		// Key2FileName := os.Args[4]
		// Key3FileName := os.Args[5]
		// resticKeyBytes, err := ioutil.ReadFile(resticKeyFile)
		// if err != nil {
		// 	panic(err)
		// }
		// //we have to return each one of these to rsa public key
		// //read the files
		// key1Bytes, err := ioutil.ReadFile(Key1FileName)
		// if err != nil {
		// 	panic(err)
		// }
		// key2Bytes, err := ioutil.ReadFile(Key2FileName)
		// if err != nil {
		// 	panic(err)
		// }
		// key3Bytes, err := ioutil.ReadFile(Key3FileName)
		// if err != nil {
		// 	panic(err)
		// }
		// key1PubRSA, err := keys.DecodePubKeyPEM(key1Bytes)
		// if err != nil {
		// 	panic(err)
		// }
		// key2PubRSA, err := keys.DecodePubKeyPEM(key2Bytes)
		// if err != nil {
		// 	panic(err)
		// }
		// key3PubRSA, err := keys.DecodePubKeyPEM(key3Bytes)
		// if err != nil {
		// 	panic(err)
		// }

		// plainTxtSecret, err := multikey.Decrypt(mkEncryptedSecret, privKeys)
	}
}
